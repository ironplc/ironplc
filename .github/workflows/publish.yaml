# Defines a weekly build for the project. Each week (or a trigger)
# releases a new version, incrementing the current version number.
#
# The essential strategy is:
#    1. Determine the next semantic version number
#    2. Update the code, create a commit with the version number, create a
#       Github release
#    3. Build the artifacts using the tag as the starting point
#    4. Cleanup Github release

on:
  # Automatically create a release every Monday at 19:00
  schedule:
      - cron: '0 19 * * 1'
  # Allow triggering directly
  workflow_dispatch:

name: Publish IronPLC Releases

jobs:
  release:
    name: Create Version and Release
    # Only needs to run on one platform because this is defining
    # the container for the release rather than building the artifacts
    runs-on: ubuntu-latest
    
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      # The tag that is the github release
      github_release_tag: v${{ steps.versioning.outputs.version }}
      # The tag in the git repository
      commit_tag: v${{ steps.versioning.outputs.version }}
      # The version number of components
      version: ${{ steps.versioning.outputs.version }}
    
    steps:
      # Checkout the repository with all tags so that versioning can find
      # the prior release.
      - uses: taiki-e/install-action@just

      # We use environment tools to setup the version number, so these
      # need to be present.
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: actions/setup-node@v3

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine version number
        id: versioning
        uses: PaulHatch/semantic-version@v5.0.2
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}"
          enable_prerelease_mode: false

      - name: Update Version Number in Code
        run: just version ${{ steps.versioning.outputs.version }}

      - name: Git commit and push for revision bump
        env: 
          CI_COMMIT_MESSAGE: Continuous integration version increment
          CI_COMMIT_AUTHOR: Continuous Integration
          CI_COMMIT_TAG: v${{ steps.versioning.outputs.version }}
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "garretfick@users.noreply.github.com"
          git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}"
          git tag -a "${{ env.CI_COMMIT_TAG }}" -m "Create tagged release ${{ env.CI_COMMIT_TAG }}"
          git push --tags

      - name: Create Github Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: v${{ steps.versioning.outputs.version }}
          draft: true
          prerelease: false
    
  build-win:
    name: Build Windows Installer
    needs: [release]
    runs-on:  ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./compiler
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        name: [ release ]

    steps:
      # Checkout the tag that is the release.
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.release.outputs.commit_tag }}
      - uses: taiki-e/install-action@just
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Compiler CI checks
        run: just ci

      # Assumes the wix toolkit is available. Need to have a real version
      # number
      - name: Create installer
        run: just package 0.0.0.0 ./ironplc-${{ matrix.name }}-windows.msi

      - name: Upload Installer
        uses: softprops/action-gh-release@v1
        with:
          files: |
            compiler/ironplc-${{ matrix.name }}-windows.msi
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: ${{ needs.release.outputs.github_release_tag }}
          fail_on_unmatched_files: true

  build-vscode-extension:
    name: Build Visual Studio Code Extension
    needs: [release]
    runs-on:  ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./integrations/vscode
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        name: [ release ]
    
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.release.outputs.commit_tag }}
      - uses: taiki-e/install-action@just
      - uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: './integrations/vscode/package-lock.json'
      
      - name: Install dependencies
        run: just setup
      - name: Build and Test
        run: just ci
      - name: Create VSIX
        run: just package ironplc-vscode-extension-release.vsix

      - name: Upload VSIX
        uses: softprops/action-gh-release@v1
        with:
          files: |
            integrations/vscode/ironplc-vscode-extension-release.vsix
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: ${{ needs.release.outputs.github_release_tag }}
          fail_on_unmatched_files: true

  publish-website:
    name: Build and Publish Website
    # The website doesn't depend on these but we don't publish
    # if those are failing so we depend on those.
    needs: [build-win, build-vscode-extension]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.release.outputs.commit_tag }}
      - uses: taiki-e/install-action@just
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Build docs
        run: just ci

      - name: Copy Build to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # The action doesn't seem to respect the working directory
          publish_dir: docs/_build
          force_orphan: true

  cleanup:
    name: Cleanup Old Development Releases
    needs: [release, publish-website]
    runs-on: ubuntu-latest
    steps:
      - uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: ${{ needs.release.outputs.github_release_tag }}
          draft: false
      - uses: eregon/keep-last-n-releases@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          n: 52
          remove_tags_without_release: true
