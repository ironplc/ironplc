# Defines a weekly build for the project. Each week (or a trigger)
# releases a new version, incrementing the current version number.
#
# The essential strategy is:
#    1. Determine the next semantic version number
#    2. Update the code, create a commit with the version number, create a
#       Github release
#    3. Build the artifacts using the tag as the starting point
#    4. Cleanup Github release

on:
  # Automatically create a release every Monday at 19:00
  schedule:
      - cron: '0 19 * * 1'
  # Allow triggering directly
  workflow_dispatch:
    inputs:
      dryrun:
        type: boolean
        description: 'If set, run as a dry run and do not create the release artifacts'
        default: true

name: Publish IronPLC Releases

jobs:
  release:
    name: Create Version and Release
    # Only needs to run on one platform because this is defining
    # the container for the release rather than building the artifacts
    runs-on: ubuntu-latest
    
    outputs:
      # The identifier for the Github release
      release_id: ${{ steps.create_release.outputs.id }}
      # The tag that is the Github release
      github_release_tag: v${{ steps.versioning.outputs.patch }}
      # The tag in the git repository
      commit_tag: ${{ steps.versioning.outputs.v_patch }}
      # The version number of components
      version: ${{ steps.versioning.outputs.patch }}
    
    steps:
      # Checkout the repository with all tags so that versioning can find
      # the prior release.
      - uses: taiki-e/install-action@just

      # We use environment tools to setup the version number, so these
      # need to be present.
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: actions/setup-node@v3

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # This is a workaround for branch protections. In general, we want to
          # protect branches from changes, but we'll take the publish as special
          # because we need to create a new version number. This allows making
          # changes to the repository without removing the branch protections.
          token: ${{secrets.IRONPLC_WORKFLOW_PUBLISH_ACCESS_TOKEN}}
      - name: Git tags
        run: |
          git pull --tags

      - name: 'Get Previous Tag (the last release)'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"

      # If we are not doing a dry run, then we want to get the next version
      # number and then set that in the code
      - name: 'Determine next release version'
        if: ${{ !inputs.dryrun }}
        id: versioning
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}
      - name: Update Version Number in Code
        if: ${{ !inputs.dryrun }}
        run: just version ${{ steps.versioning.outputs.patch }}

      - name: Git commit and push for revision bump
        if: ${{ !inputs.dryrun }}
        env: 
          CI_COMMIT_MESSAGE: Continuous integration version increment
          CI_COMMIT_AUTHOR: Continuous Integration
          CI_COMMIT_TAG: v${{ steps.versioning.outputs.patch }}
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "garretfick@users.noreply.github.com"
          git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}"
          git tag -a "${{ env.CI_COMMIT_TAG }}" -m "Create tagged release ${{ env.CI_COMMIT_TAG }}"
          git push
          git push --tags
        
      - name: Create Github Release
        if: ${{ !inputs.dryrun }}
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: v${{ steps.versioning.outputs.patch }}
          draft: true
          prerelease: false

  build-vscode-extension:
    name: Build Visual Studio Code Extension
    # This depends on platform packages only so that this one can mark the
    # release as not a draft.
    needs: [release]
    runs-on:  ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./integrations/vscode
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        name: [ release ]
    
    steps:
      - name: Checkout tag ${{ needs.release.outputs.commit_tag }}
        uses: actions/checkout@v3
        if: ${{ !inputs.dryrun }}
        with:
          ref: ${{ needs.release.outputs.commit_tag }}
      - name: Checkout HEAD
        uses: actions/checkout@v3
        if: ${{ inputs.dryrun }}
      - uses: taiki-e/install-action@just
      - uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: './integrations/vscode/package-lock.json'
          node-version: 'lts/Hydrogen'

      - name: Install X server components and Xvfb
        run: sudo apt update && sudo apt install -y libnss3 libatk1.0-0 libatk-bridge2.0-0 libdrm2 libgtk-3-0 libgbm1 libasound2 xvfb
        if: env.IRONPLC_INSTALL_DEPS != ''

      - name: Install dependencies
        run: just setup
      - name: Build and Test
        run: just ci
      - name: Create VSIX
        run: just package ironplc-vscode-extension.vsix

      - name: Upload VSIX
        if: ${{ !inputs.dryrun }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            integrations/vscode/ironplc-vscode-extension.vsix
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: ${{ needs.release.outputs.github_release_tag }}
          fail_on_unmatched_files: true
          draft: true
    
  build-platform-package:
    name: Build Platform Package
    needs: [release, build-vscode-extension]
    runs-on:  ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./compiler
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact: ironplcc-x86_64-windows.exe
          - os: ubuntu-latest
            artifact: ironplcc-x86_64-linux-musl.tar.gz
          - os: macos-latest
            artifact: ironplcc-x86_64-macos.tar.gz

    steps:
      # Checkout the code. If we are creating a release, then checkout
      # the release tag. Otherwise just checkout the latest code.
      - name: Checkout tag ${{ needs.release.outputs.commit_tag }}
        uses: actions/checkout@v3
        if: ${{ !inputs.dryrun }}
        with:
          ref: ${{ needs.release.outputs.commit_tag }}
      - name: Checkout HEAD
        uses: actions/checkout@v3
        if: ${{ inputs.dryrun }}

      - uses: taiki-e/install-action@just
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
      - uses: taiki-e/install-action@cargo-llvm-cov

      - name: Compiler CI checks
        run: just ci

      # Assumes a number of packages are installed on the host
      - name: Create installer
        run: just package ${{ needs.release.outputs.version }} ${{ matrix.artifact }}

      - name: Upload Installer
        if: ${{ !inputs.dryrun }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            compiler/${{ matrix.artifact }}
            compiler/${{ matrix.artifact }}.sha256
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: ${{ needs.release.outputs.github_release_tag }}
          fail_on_unmatched_files: true
          draft: true
  
  publish-website:
    name: Build and Publish Website
    # The website doesn't depend on these but we don't publish
    # if those are failing so we depend on those.
    needs: [release, build-platform-package, build-vscode-extension]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      - uses: actions/checkout@v3
        if: ${{ !inputs.dryrun }}
        with:
          ref: ${{ needs.release.outputs.commit_tag }}
      - uses: actions/checkout@v3
        if: ${{ inputs.dryrun }}
      - uses: taiki-e/install-action@just
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Build docs
        run: just ci

      - name: Copy Build to gh-pages branch
        if: ${{ !inputs.dryrun }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # The action doesn't seem to respect the working directory
          publish_dir: docs/_build
          force_orphan: false
          allow_empty_commit: false

  publish-release:
    name: Finalize Release
    needs: [release, publish-website]
    runs-on: ubuntu-latest
    steps:
      - name: Publish release
        if: ${{ !inputs.dryrun }}
        uses: irongut/EditRelease@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ needs.release.outputs.release_id }}
          draft: false
    
      - name: Cleanup Drafts and Old Release
        if: ${{ !inputs.dryrun }}
        uses: eregon/keep-last-n-releases@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          n: 52
          remove_tags_without_release: true

  publish-homebrew:
    name: Publish Homebrew Tap
    needs: [release, publish-release]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./compiler
    steps:
      - uses: actions/checkout@v3
        if: ${{ !inputs.dryrun }}
        with:
          ref: ${{ needs.release.outputs.commit_tag }}
      - uses: actions/checkout@v3
        if: ${{ inputs.dryrun }}

      - uses: taiki-e/install-action@just

      - name: Build Homebrew repository
        run: just publish ${{ needs.release.outputs.version }} ironplcc-x86_64-macos.tar.gz ironplcc-x86_64-linux-musl.tar.gz

      - name: Copy to Homebrew Tap Repository
        if: ${{ !inputs.dryrun }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: main
          external_repository: ironplc/homebrew-brew
          personal_token: ${{secrets.IRONPLC_WORKFLOW_PUBLISH_ACCESS_TOKEN}}
          # The action doesn't seem to respect the working directory
          publish_dir: compiler/target/homebrew
          force_orphan: false
          allow_empty_commit: false


      