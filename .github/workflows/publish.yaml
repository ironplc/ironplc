on:
  push:
    tags:        
      - '*'
  schedule:
      # Automatically create a release every Monday at 19:00
      - cron: '0 19 * * 1'
  workflow_dispatch:
    inputs:
      release_tag:
        required: true
        type: string

name: Publish IronPLC Releases

jobs:
  release:
    name: Create GitHub Release
    # Only needs to run on one platform because this is defining
    # the container for the release rather than building the artifacts
    runs-on: ubuntu-latest
    
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag: ${{ steps.create_tag.outputs.tag }}
    
    steps:
      - uses: actions/checkout@v3
        if: github.event_name == 'schedule'
      - uses: actions/checkout@v3
        if: github.event_name == 'workflow_dispatch'
      
      # The tag depends on whether the this ran because a tag was creates
      # of it this was a scheduled release.
      - name: Create Tag
        id: create_tag
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            tag=v$(date +%Y%m%d.%H%M%S)
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            tag=${{ inputs.release_tag }}
          else
            tag=$(basename "${{ github.ref }}")
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: ${{ steps.create_tag.outputs.tag }}
          draft: true
          prerelease: false
    
  build-win:
    name: Build Windows Installer
    needs: [release]
    defaults:
      run:
        working-directory: ./compiler
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        name: [ release ]
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Rust tests
        # Only runs the unit tests - we don't care here about formatting
        # or other things because we are building the release
        run: cargo test --all-features

      - name: Install cargo-wix tool
        run: cargo install cargo-wix

      # Assumes the wix toolkit is available.
      - name: Create installer
        run: cargo wix -v --nocapture -o ./ironplc-${{ matrix.name }}-windows.msi -p ironplcc

      - name: Upload Windows Installer
        uses: softprops/action-gh-release@v1
        with:
          files: |
            compiler/ironplc-${{ matrix.name }}-windows.msi
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: ${{ needs.release.outputs.tag }}
          fail_on_unmatched_files: true

  cleanup:
    name: Cleanup Old Development Releases
    needs: [release, build-win]
    runs-on: ubuntu-latest
    steps:
      - uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: ${{ needs.release.outputs.tag }}
          draft: false
      - uses: eregon/keep-last-n-releases@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          n: 3
          remove_tags_without_release: true