# Defines a weekly build for the project. Each week (or when triggered)
# create a new release (having a new release number).
#
# The essential strategy is:
#    1. Determine the next semantic version number
#    2. Update the code, create a commit with the version number, create a
#       Github release
#    3. Build the artifacts using the tag as the starting point
#    4. Check that everything actually works together
#    5. Publish the changes
#    6. clean up old artifacts

on:
  # Automatically create a release every Monday at 19:00
  schedule:
      - cron: '0 19 * * 1'
  # Allow triggering directly
  workflow_dispatch:
    inputs:
      dryrun:
        type: boolean
        description: 'If set, run as a dry run and do not create the release artifacts'
        default: true

name: IronPLC Deployment

jobs:
  release:
    name: Create Version Numbers and GitHub Release for the Artifacts
    uses: ./.github/workflows/partial_version.yaml
    with:
      dryrun: ${{ inputs.dryrun }}

  build-vscode-extension:
    name: Build Visual Studio Code Extension
    needs: [release]
    uses: ./.github/workflows/partial_vscode_extension.yaml
    with:
      commit-tag: ${{ needs.release.outputs.commit-tag }}
      gh-release-tag: ${{ needs.release.outputs.gh-release-tag }}
      artifact-name: vscode-extension
    
  build-platform-package:
    name: Build Compiler and Associated Installers
    needs: [release]
    uses: ./.github/workflows/partial_compiler.yaml
    with:
      commit-tag: ${{ needs.release.outputs.commit-tag }}
      gh-release-tag: ${{ needs.release.outputs.gh-release-tag }}
      version: ${{ needs.release.outputs.version }}

  publish-prerelease:
    name: Label GitHub Release as Prerelease
    # In order to do a smoke test, we need a public accessible release
    needs: [release, build-platform-package, build-vscode-extension]
    runs-on: ubuntu-latest
    if: ${{ !inputs.dryrun }}
    steps:
      # Save artifacts
      - name: Label GitHub Release as pre-release
        uses: irongut/EditRelease@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ needs.release.outputs.gh-release-id }}
          prerelease: true
          draft: false

  smoke-test:
    name: End to End Smoke Test
    # Install the components on a real machine and verify that they
    # all work together. If this passes, we have a good consistent
    # build.
    needs: [release, publish-prerelease]
    uses: ./.github/workflows/partial_integration_test.yaml
    if: ${{ !inputs.dryrun }}
    with:
      version: ${{ needs.release.outputs.version }}
      download-tag: v${{ needs.release.outputs.version }}
      ironplcc-installer-x86_64-windows-filename: "ironplcc-x86_64-windows.exe"
      ironplc-vscode-extension-filename: "ironplc-vscode-extension.vsix"
      ironplc-vscode-extension-name: "garretfick.ironplc"
  
  publish-website:
    name: Build and Publish Website
    # The website doesn't depend on these but we don't publish
    # if those are failing so we depend on those.
    needs: [release, smoke-test]
    uses: ./.github/workflows/partial_website.yaml
    if: ${{ !inputs.dryrun }}
    with:
      publish: true
      commit-tag: ${{ needs.release.outputs.commit-tag }}

  publish-release:
    name: Publish Release
    needs: [release, publish-website]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      # Fetch input artifacts and code
      - name: Download VSIX Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: vscode-extension
          path: vscode-extension.vsix
      
      # Configure the execution environment
      - uses: taiki-e/install-action@just
      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: 'lts/Hydrogen'

      # Execute build recipes
      - name: Publish VS Code Extension to Marketplace
        if: ${{ !inputs.dryrun }}
        run: just publish vscode-extension.vsix ${{ secrets.VS_MARKETPLACE_TOKEN }}

      # Save artifacts
      - name: Publish GitHub Release
        if: ${{ !inputs.dryrun }}
        uses: irongut/EditRelease@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ needs.release.outputs.gh-release-id }}
          prerelease: false

  publish-homebrew:
    name: Publish Homebrew Tap
    needs: [release, publish-release]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./compiler
    steps:
      # Fetch input artifacts and code
      - uses: actions/checkout@v4
        if: ${{ !inputs.dryrun }}
        with:
          ref: ${{ needs.release.outputs.commit-tag }}
      - uses: actions/checkout@v4
        if: ${{ inputs.dryrun }}

      # Configure the execution environment
      - uses: taiki-e/install-action@just

      # Execute build recipes
      - name: Build Homebrew repository
        run: just publish ${{ needs.release.outputs.version }} ironplcc-x86_64-macos.tar.gz ironplcc-x86_64-linux-musl.tar.gz

      # Save artifacts
      - name: Copy to Homebrew Tap Repository
        if: ${{ !inputs.dryrun }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: main
          external_repository: ironplc/homebrew-brew
          personal_token: ${{secrets.IRONPLC_WORKFLOW_PUBLISH_ACCESS_TOKEN}}
          # The action doesn't seem to respect the working directory
          publish_dir: compiler/target/homebrew
          force_orphan: false
          allow_empty_commit: false

  cleanup:
    name: Cleanup Old Artifacts
    needs: [publish-homebrew]
    runs-on: ubuntu-latest
    steps:
      # Execute build recipes
      - name: Cleanup Drafts and Old Release
        if: ${{ !inputs.dryrun }}
        uses: eregon/keep-last-n-releases@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          n: 52
          remove_tags_without_release: true


      