set windows-shell := ["powershell.exe", "-c"]

alias ci := default
default: compile test lint

setup:
  cargo install llvm-cov
  cargo install cargo-release

compile:
  cargo build

test:
  cargo test --all-targets
  cargo llvm-cov --all-features --workspace --fail-under-lines 85 --show-missing-lines

# Fix linting errors.
format:
  cargo clippy
  cargo fmt --all

# Check for linting errors.
lint:
  cargo clippy
  cargo fmt --all -- --check

# Set the version number for this component.
version version:
  cargo release version {{version}} --execute --no-confirm

# Creates the installer or package (as appropriate for platform)
package version filename:
  just _package-{{os()}} {{version}} {{filename}}

# Creates a "Windows installer" running from Linux. Only useful to testing.
package-windows-on-linux version filename:
  cargo build --release

  # When building on Linux, we expect an empty extension
  makensis -DOUTFILE="{{filename}}" -DVERSION="{{version}}" -DEXTENSION="" "setup.nsi"


_package-windows version filename:
  cargo build --release

  # makensis will write to the directory with the NSI file or the absolute path
  # provided. It is pretty difficult to do this with justfile.
  makensis -DOUTFILE="{{filename}}" -DVERSION="{{version}}" "setup.nsi"
  # Some versions of Windows do something funky with the path so that
  # Get-FileHash is not available. The prefix makes sure we run with a
  # compatible PowerShell instance.
  pwsh -noprofile -command '$env:PSModulePath = \"$PSHOME/Modules\"; Get-FileHash -Path "{{filename}}" -Algorithm SHA512 | Select-Object -ExpandProperty Hash | Out-File {{filename}}.sha256'

_package-macos version filename:
  cargo build --release
  tar -czvf {{filename}} --directory=target/release ironplcc
  shasum -a 256 {{filename}} > {{filename}}.sha256

_package-linux version filename:
  cargo build --release
  tar -czvf {{filename}} --directory=target/release ironplcc
  sha256sum {{filename}} > {{filename}}.sha256

# Builds the Homebrew repository to release for Mac and Linux
publish $VERSION $MACFILENAME $LINUXFILENAME:
  # Use actual releases in order to build the Homebrew tap.
  # The advantage of using a real release is that we are guaranteed that the
  # files are accessible and do not publish a new release if the release failed.
  curl -LO --fail https://github.com/ironplc/ironplc/releases/download/v{{VERSION}}/{{MACFILENAME}}.sha256 --output {{MACFILENAME}}.sha256
  curl -LO --fail https://github.com/ironplc/ironplc/releases/download/v{{VERSION}}/{{LINUXFILENAME}}.sha256 --output {{LINUXFILENAME}}.sha256
  rm -rf target/homebrew
  mkdir -p target
  cp -r homebrew target
  export MACSHA256=`cat {{MACFILENAME}}.sha256 | cut -f 1 -d " "` && export LINUXSHA256=`cat {{LINUXFILENAME}}.sha256 | cut -f 1 -d " "` && envsubst < homebrew/Formula/ironplc.rb > target/homebrew/Formula/ironplc.rb

# Updates dependencies to latest version (or at least tries)
update:
  cargo update
