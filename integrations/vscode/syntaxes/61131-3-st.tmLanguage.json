{
    "scopeName": "source.61131-3-st",
    "patterns": [{ "include": "#types" }, { "include": "#pous" }, { "include": "#operators" }, { "include": "#keywords" }, { "include": "#comments" }],
    "repository": {
      "types": {
        "patterns": [
            {
                "name": "storage.type",
                "match": "(?i)\\b(END_)?TYPE\\b"
            },
            {
                "name": "entity.name",
                "match": "(?i)\\b[a-zA-Z_]*\\s*:\\s*(STRUCT)\\b",
                "captures": {
                    "1": {
                        "name": "storage.type"
                    }
                }
            },
            {
                "name": "storage.type",
                "match": "(?i)\\bEND_STRUCT\\b"
            },
            {
                "name": "entity.name",
                "match": "(?i)\\b[a-zA-Z_]*\\s*:\\s*(WSTRING|STRING)\\b",
                "captures": {
                    "1": {
                        "name": "storage.type"
                    }
                }
            }
        ]
      },
      "pous": {
        "patterns": [
            {
                "name": "storage.function",
                "match": "\\b(PROGRAM|FUNCTION|FUNCTION_BLOCK)\\s*\\b([a-zA-Z0-9_]*)\\b",
                "captures": {
                    "1": {
                        "name": "storage.function"
                    },
                    "2": {
                        "name": "entity.name.function"
                    }
                },
                "patterns": [
                    { "include": "#operators" },
                    { "include": "#keywords" }
                ]
            },
            {
                "name": "storage.function",
                "match": "\\b(END_PROGRAM|END_FUNCTION|END_FUNCTION_BLOCK)\\b"
            }
        ]
      },
      "operators": {
        "patterns": [
            {
                "name": "keyword.operator.comparison",
                "match": "(?:<>|=)"
            },
            {
                "name": "keyword.operator.eqv_expression",
                "match": "(?:<|>|<=|>=)"
            },
            {
                "name": "keyword.operator.add_expression",
                "match": "(?:\\+|\\-)"
            },
            {
                "name": "keyword.operator.multiply_operator",
                "match": "(?:\\*|\\/|MOD)"
            }
        ]
      },
      "keywords": {
        "patterns": [
            {
                "name": "keyword.control.iteration",
                "match": "\\b(?:BY|DO|FOR|REPEAT|TO|UNTIL|WHILE)\\b"
            },
            {
                "name": "keyword.control.branch",
                "match": "\\b(?:IF|THEN|END_IF)\\b"
            },
            {
                "name": "keyword.other",
                "match": "\\b(?:CONFIGURATION|END_CONFIGURATION|RESOURCE|END_RESOURCE|TASK)\\b"
            },
            
            {
                "name": "keyword.other",
                "match": "\\b(?:ON|WITH)\\b"
            },
            
            {
                "name": "storage.var",
                "match": "\\b(?:VAR|VAR_INPUT|VAR_OUTPUT|END_VAR)\\b"
            },
            {
                "name": "storage.modifier",
                "match": "\\b(?:RETAIN|CONSTANT)\\b"
            }
        ]
      },
      "comments": {
        "patterns": [
            {
                "name": "comment.block",
                "begin": "\\(\\*",
				"end": "\\*\\)"
            }
        ]
      }
    }
  }
